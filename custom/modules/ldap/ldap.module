<?php

/**
 * @file
 * This module facilitates logging in using LDAP instead of FlightPath's regular login method.
 */



function ldap_menu() {
  $items = array();
  
  $items["admin/config/ldap"] = array(
    "title" => "LDAP settings",
    "page_callback" => "fp_render_form",
    "page_arguments" => array("ldap_settings_form", "system_settings"),
    "access_arguments" => array("administer_ldap"),
    "page_settings" => array(
      "page_has_search" => FALSE,
      "page_banner_is_link" => TRUE,
      "page_hide_report_error" => TRUE,
      "menu_links" => array(         
        0 => array(
          "text" => "Back to main menu",
          "path" => "admin-tools/admin",
        ),
      ),
    ),    
    "type" => MENU_TYPE_NORMAL_ITEM,
    "tab_parent" => "admin-tools/admin",    
  );     
  
  return $items;
  
}


function ldap_perm() {
  return array(
    "administer_ldap" => array(
      "title" => t("trarabic_10460"),
      "description" => t("trarabic_10461"),
    ),
  );
}
 



/**
 * Authenticate the user with the ldap server.
 * 
 * Checks the username and password in the ldap server, and returns
 * back the result.
 * 
 */
function ldap_auth_connect($username, $password) {
  $rtn = FALSE;
  
	// First, connect to the LDAP server and see that this is
	// a valid login.
  $server = variable_get("ldap_server_ip", "");
  $server2 = variable_get("ldap_server_ip2", "");
  
  // If we have a second server specified, then try to randomly select between the two, for
  // load balancing purposes.
  if (trim($server2) != "") {
    $r = rand(1, 2);
    if ($r == 2) {
      $server = $server2;
    }
  }
  
    
	$port = variable_get("ldap_server_port", "389");
	if (in_array("yes", variable_get("ldap_connect_secure", array()))) {
	  // This should be a secure connection.
	  $server = "ldaps://" . $server;
	}
  
	
	$ldapconn = ldap_connect($server, $port);
	if (!$ldapconn) {
	  fp_add_message(t("trarabic_20086", array("%server" => "$server:$port")));
	  return FALSE;
	}

	
	$uid_attr = variable_get("ldap_uid_attr", "uid");

  // First, let's try to connect using the search dn, to try and find the user and get our results.	
  $search_dn = variable_get("ldap_search_dn", "");
  $search_password = variable_get("ldap_search_password", "");
    
  
  // Attempt the non-anonymous search bind first.
	$x = ldap_bind($ldapconn, $search_dn, $search_password);
	if (!$x) {
	  watchdog("ldap", "Could not bind to search DN, using the search DN and password.");
	  fp_add_message(t("trarabic_20087"), "error");
	  return FALSE;
	}	

	$bind_successful = FALSE;
	
	$base_dns = variable_get("ldap_base_dns", "");
	$lines = explode("\n", $base_dns);	
	foreach($lines as $base_dn) {
	  // Try out all of our base_dns
	  $base_dn = trim($base_dn);	
	
  	$r = ldap_search($ldapconn, $base_dn, "$uid_attr=$username");
  	if ($r) {	
  	  
  		$result = ldap_get_entries($ldapconn, $r);
  		if (is_array($result) && intval($result["count"]) > 0) {
  		  $result = $result[0];
        
  		  // Okay, it was successful!  Let's store the results about this user.
  		  $rtn = $result;


  		  // Okay, now we need this individual user's DN, so we can authenticate.
  		  $user_dn_field = variable_get("ldap_user_dn_field_name", "dn");
  		  
  		  $user_base_dn = ldap_get_field_value_from_result($user_dn_field, $result);
  		
  		  // Continuing, let's now bind for the individual user, using their full DN and supplied password.
  		  // Attempt to authenticate...    	
      	$bind_successful = FALSE;
    	  $bind_successful = @ldap_bind($ldapconn, $user_base_dn, $password);
    	  if ($bind_successful) break;    	
  		  
  		}		
  	}  	
  	
	} //foreach 
	

	// Tidy up...
	ldap_close($ldapconn);  
	
	
	if ($bind_successful) {	
	 return $rtn;	
	}
	else {
	  return FALSE;
	}
	
	
}







function z__old__ldap_auth_connect($username, $password) {
  $rtn = FALSE;
  
	// First, connect to the LDAP server and see that this is
	// a valid login.
  $server = variable_get("ldap_server_ip", "");
  $server2 = variable_get("ldap_server_ip2", "");
  
  // If we have a second server specified, then try to randomly select between the two, for
  // load balancing purposes.
  if (trim($server2) != "") {
    $r = rand(1, 2);
    if ($r == 2) {
      $server = $server2;
    }
  }
  
    
	$port = variable_get("ldap_server_port", "389");
	if (in_array("yes", variable_get("ldap_connect_secure", array()))) {
	  // This should be a secure connection.
	  $server = "ldaps://" . $server;
	}
  
	
	$ldapconn = ldap_connect($server, $port);
	if (!$ldapconn) {
	  fp_add_message(t("trarabic_20088", array("%server" => "$server:$port")));
	  return;
	}

	// Attempt to authenticate...
	$uid_attr = variable_get("ldap_uid_attr", "uid");
	$base_dns = variable_get("ldap_base_dns", "");
	$lines = explode("\n", $base_dns);
	$bind_successful = FALSE;
	foreach($lines as $base_dn) {
	  // Try out all of our base_dns
	  $base_dn = trim($base_dn);	  
	  $bind_successful = @ldap_bind($ldapconn, "$uid_attr=$username,$base_dn", $password);
	  if ($bind_successful) break;
	}

	// If the bind was successful, it means we got a valid username and password
	// from the user.  Now, let's bind with our search DN and search password
	// to get more information about the user.
	if ($bind_successful)
	{
	  
	  $search_dn = variable_get("ldap_search_dn", "");
	  $search_password = variable_get("ldap_search_password", "");
	  
		$x = ldap_bind($ldapconn, $search_dn, $search_password);
		$r = ldap_search($ldapconn, $base_dn, "$uid_attr=$username");
		if ($r)
		{
			$result = ldap_get_entries($ldapconn, $r);
			if (is_array($result)) {
			  $result = $result[0];
        
			  // Okay, it was successful!  We can now return a success
			  // message with our result.
			  $rtn = $result;
			  			  
			}
			
		}
	}

	
	ldap_close($ldapconn);  
	
	return $rtn;	
	
}







/**
 * This is the config form for the ldap module.
 *
 */
function ldap_settings_form() {
  $form = array();
  
  fp_add_css(fp_get_module_path("ldap") . "/css/ldap.css");
  
  $form["ldap_server_ip"] = array(
    "label" => t("trarabic_10462"),
    "type" => "text",
    "value" => variable_get("ldap_server_ip", ""),
    "description" => t("trarabic_10463"),
  );
  
  $form["ldap_server_ip2"] = array(
    "label" => t("trarabic_10464"),
    "type" => "text",
    "value" => variable_get("ldap_server_ip2", ""),
    "description" => t("trarabic_20089"),
  );
  
  
  $form["ldap_server_port"] = array(
    "label" => t("trarabic_10465"),
    "type" => "text",
    "size" => 10,
    "value" => variable_get("ldap_server_port", "389"),
    "description" => t("trarabic_10466"),
  );
  
  $form["ldap_connect_secure"] = array(
    "label" => t("trarabic_10467"),
    "type" => "checkboxes",
    "options" => array("yes" => t("trarabic_10468")),
    "value" => variable_get("ldap_connect_secure", array()),
    "description" => t("trarabic_20090"),
  );
  

  $form["ldap_search_dn"] = array(
    "label" => t("trarabic_10469"),
    "type" => "text",
    "value" => variable_get("ldap_search_dn", ""),
    "description" => t("trarabic_10470"),
  );
  

  $form["ldap_search_password"] = array(
    "label" => t("trarabic_10471"),
    "type" => "password",
    "value" => variable_get("ldap_search_password", ""),    
  );
  
  $form["ldap_base_dns"] = array(
    "label" => t("trarabic_10472"),
    "type" => "textarea",
    "value" => variable_get("ldap_base_dns", ""),
    "description" => t("trarabic_10473"),
  );


  $form["ldap_uid_attr"] = array(
    "label" => t("trarabic_10474"),
    "type" => "text",
    "size" => 20,
    "value" => variable_get("ldap_uid_attr", "uid"),
    "description" => t("trarabic_10475") . "<br><b>
                      " . t("trarabic_20091") . "</b>",
  );

  
  
  $form["ldap_user_dn_field"] = array(
    "label" => t("trarabic_10476"),
    "type" => "text",
    "size" => 20,
    "value" => variable_get("ldap_user_dn_field_name", "dn"),
    "description" => t("trarabic_20092") . "<br><b>
                      " . t("trarabic_20093") . "</b>",
  );
  

  $form["ldap_no_cwid_msg"] = array(
    "label" => t("trarabic_10477"),
    "type" => "textarea",
    "rows" => 2,
    "value" => variable_get("ldap_no_cwid_msg", t("trarabic_10478")),
    "description" => t("trarabic_10479"),
  );

  
  
  ///////////////////
  
  
  $form["ldap_cwid_field"] = array(
    "label" => t("trarabic_10480"),
    "type" => "text",
    "size" => 30,
    "prefix" => "<hr>",
    "value" => variable_get("ldap_cwid_field", "employeenumber"),
    "description" => t("trarabic_20094") . "
                        <br><b>" . t("trarabic_20095") . "</b>",
  );  
  
  
  $form["ldap_f_name_field"] = array(
    "label" => t("trarabic_10481"),
    "type" => "text",
    "size" => 30,    
    "value" => variable_get("ldap_f_name_field", ""),
    "description" => t("trarabic_20096") . "
                        <br><b>" . t("trarabic_20097") . "</b>",
  );  
  
  $form["ldap_l_name_field"] = array(
    "label" => t("trarabic_10482"),
    "type" => "text",
    "size" => 30,    
    "value" => variable_get("ldap_l_name_field", ""),
    "description" => t("trarabic_20098") . "
                        <br><b>" . t("trarabic_20099") . "</b>",
  );  
  
  
  
  $op_options = array(
    "contains" => t("trarabic_10483"),
    "does not contain" => t("trarabic_10484"),
    "is numeric" => t("trarabic_10485"),
    "is not numeric" => t("trarabic_10486"),
    "is blank" => t("trarabic_10487"),
    "is not blank" => t("trarabic_10488"),
    "invoke hook" => t("trarabic_10489"),
  );
    
  
  $form["ldap_is_student_field"] = array(
    "type" => "text",
    "size" => 10,
    "value" => variable_get("ldap_is_student_field", "usertype"),
    "prefix" => "<p><b>" . t("trarabic_10490") . "</b></p>" . t("trarabic_10491") . " ",
  );
  
  $form["ldap_is_student_op"] = array(
    "type" => "select",
    "options" => $op_options,
    "no_please_select" => TRUE,
    "value" => variable_get("ldap_is_student_op", array()),
  );

  $form["ldap_is_student_op_value"] = array(
    "type" => "text",
    "size" => 15,
    "value" => variable_get("ldap_is_student_op_value", "student"),
    "prefix" => " " . t("trarabic_10492"),
    "description" => t("trarabic_20100") . "
                        <br><b>" . t("trarabic_20101") . "</b>",
  );
  

  
  $form["ldap_is_faculty_field"] = array(
    "type" => "text",
    "size" => 10,
    "value" => variable_get("ldap_is_faculty_field", "usertype"),
    "prefix" => "<p><b>" . t("trarabic_10493") . "</b></p>" . t("trarabic_10494") . " ",
  );
  
  $form["ldap_is_faculty_op"] = array(
    "type" => "select",
    "options" => $op_options,
    "no_please_select" => TRUE,
    "value" => variable_get("ldap_is_faculty_op", array()),
  );

  $form["ldap_is_faculty_op_value"] = array(
    "type" => "text",
    "size" => 15,
    "value" => variable_get("ldap_is_faculty_op_value", "faculty"),
    "prefix" => " " . t("trarabic_10495"),
    "description" => t("trarabic_20102") . "
                        <br><b>" . t("trarabic_20103") . "</b><br><br>",
  );
  
  
  $form["ldap_user_type_binary"] = array(
    "label" => t("trarabic_10496"),
    "type" => "radios",
    "options" => array("only_one" => t("trarabic_10497"), 
                       "both" => t("trarabic_10498")),
    "value" => variable_get("ldap_user_type_binary", "only_one"),
  );
  
  
  
  $form["mark" . $m++] = array(
    "value" => "<hr>",
  );
  
  return $form;
}


/**
 * Implementation of hook_form_alter
 *
 * @param unknown_type $form
 * @param unknown_type $form_id
 */
function ldap_form_alter(&$form, $form_id) {
  
  // The primary thing we want to do here is add OUR validate handler
  // to the login form.  We want to overwrite the default one that's there.
  if ($form_id == "system_login_form") {    
    $form["#validate_handlers"] = array("ldap_login_form_validate");
  }
  
  
}


/**
 * Custom validate handler for the login form.
 * 
 * We will check in both FlightPath's regular user table, as well as establish
 * our LDAP connection and try to authenticate there.
 *
 * @param unknown_type $form
 * @param unknown_type $form_state
 */
function ldap_login_form_validate(&$form, &$form_state) {

  $username = $form_state["values"]["user"];
  $password = $form_state["values"]["password"];
  
  // If the GRANT_FULL_ACCESS is turned on, skip trying to validate
  if ($GLOBALS["fp_system_settings"]["GRANT_FULL_ACCESS"] == TRUE) {
    $username = "admin";
    $form_state["passed_authentication"] = TRUE;
    $form_state["db_row"]["user_id"] = 1;
    $form_state["db_row"]["user_name"] = "FULL ACCESS USER";
    return;
  }    
  
  // Let's check in the usual way first:
  $res = db_query("SELECT * FROM users WHERE user_name = '?' AND password = '?' AND is_disabled = '0' ", $username, md5($password));
  if (db_num_rows($res) > 0) {
    // Okay, we found a match.  Let's just use that.
    $cur = db_fetch_array($res);
    $form_state["db_row"] = $cur;
    $form_state["passed_authentication"] = TRUE;
    return;
  }
  

  // Okay, we made it here.  Let's connect to LDAP and check there.
  $result = ldap_auth_connect($username, $password);
  
  if ($result) {
    // Save in the form_state for other users.
    $form_state["ldap_result"] = $result;
    $cwid_field = trim(variable_get("ldap_cwid_field", "employeenumber"));
    $cwid = $result[$cwid_field][0];    
    
    if (!$cwid || $cwid == "") {
      fp_add_message(variable_get("ldap_no_cwid_msg", ""));
      return;
    }

    $f_name_field = trim(variable_get("ldap_f_name_field", ""));
    $l_name_field = trim(variable_get("ldap_l_name_field", ""));
    $f_name = ucwords(strtolower($result[$f_name_field][0]));
    $l_name = ucwords(strtolower($result[$l_name_field][0]));
        
    $is_student = ldap_get_user_is_type_from_result("student", $result);
    $is_faculty = ldap_get_user_is_type_from_result("faculty", $result);

    // Can the user be only one type?  Either student or faculty?
    if (variable_get("ldap_user_type_binary", "only_one") == "only_one") {
      // If this is the case, we want to give precidence to faculty
      if ($if_faculty) $is_student = FALSE;
    }
    
    // Let's update the users table with this new information for this user.
    
    //$user_id = db_get_user_id($username);
    if ($is_student) $test_type = "student";
    if ($is_faculty) $test_type = "faculty";
    $user_id = db_get_user_id_from_cwid($cwid, $test_type);
    
    if ($user_id) {    
      $res = db_query("UPDATE users 
              SET password = 'LDAP user',
                  is_student = '?',
                  is_faculty = '?',
                  f_name = '?',
                  l_name = '?',
                  cwid = '?',
                  user_name = '?'                
              WHERE user_id = '?'
              ", intval($is_student), intval($is_faculty), $f_name, $l_name, $cwid, $username, $user_id);
    }
    else {
      // Add this as a new user to the table.
      
      db_query("INSERT INTO users (cwid, user_name, password, is_student, is_faculty, f_name, l_name)
                VALUES ('?', '?', 'LDAP user', '?', '?', '?', '?')
                ", $cwid, $username, intval($is_student), intval($is_faculty), $f_name, $l_name);
      $user_id = db_get_user_id($username);
      
      // Also, add this user to either the students and/or faculty table.
      if ($is_student) {
        db_query("INSERT INTO students (cwid, is_active) VALUES ('?', '1') ", $cwid);
      }
      if ($is_faculty) {
        db_query("INSERT INTO faculty (cwid) VALUES ('?') ", $cwid);
      }
      
    }
                  
    // Okay, so that this user may be logged in correctly,
    // we need to add values to $form_state["db_row"]
    $res = db_query("SELECT * FROM users WHERE user_id = '?' ", $user_id);
    $cur = db_fetch_array($res);
    $form_state["db_row"] = $cur;
    $form_state["passed_authentication"] = TRUE;
    return;
       
  }

  
   
  // If we are here, then we couldn't log in.  Let's display a form_error.
  form_error("password", t("trarabic_20104"));
  
}



/**
 * This will find the field value in the ldap result set, whether it is at $result["field_name"]
 * or $result["field_name"][0].
 *
 * @param unknown_type $field
 * @param unknown_type $result
 */
function ldap_get_field_value_from_result($field, $result) {
  
  $res = FALSE;
  if (isset($result[$field]) && !is_array($result[$field])) {
    $res = $result[$field];
  }
  else if (isset($result[$field][0])) {
    $res = $result[$field][0];
  }
    
  return $res;
  
}






/**
 * Looks at the ldap result to determine if this person's is_{type} flag should be set in the db.
 *
 * @param unknown_type $type
 * @param unknown_type $result
 */
function ldap_get_user_is_type_from_result($type, $result) {

  $field = variable_get("ldap_is_{$type}_field", "");
  $op = variable_get("ldap_is_{$type}_op", "");
  $op_value = variable_get("ldap_is_{$type}_op_value", "");
  
  
  // Get the field's value, if it is set, at either the field, or field[0], as is more often the case.
  $res = ldap_get_field_value_from_result($field, $result);
    
    
  if ($op == "contains") {
    if (stristr($res, $op_value)) {
      return TRUE;
    }
  }  
  
  if ($op == "does not contain") {
    if (!stristr($res, $op_value)) {
      return TRUE;
    }
  }  
  
  if ($op == "is numeric") {
    if (is_numeric($res)) {
      return TRUE;
    }
  }
  
  if ($op == "is not numeric") {
    if (!is_numeric($res)) {
      return TRUE;
    }
  }

  if ($op == "is blank") {
    if ($res == "") {
      return TRUE;
    }
  }
  
  if ($op == "is not blank") {
    if ($res != "") {
      return TRUE;
    }
  }

  
  if ($op == "invoke hook") {    
    // We should check to see if any other modules use the hook_ldap_determine_user_type, 
    // and if so, invoke them.
    $arr = invoke_hook("ldap_determine_user_type", array($type, $result));
    if (count($arr) > 0) {      
      // use the last result.
      $r = FALSE;
      foreach ($arr as $k => $v) {
        $r = $v;
      }
      return $r;
    }    
  }
    
  return FALSE;  
  
}


