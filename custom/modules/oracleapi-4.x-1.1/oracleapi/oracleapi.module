<?php

/**
 * @file
 * This is the Oracle API module's primary module file.
 *
 * This module is designed for use by programmers for interacting with Oracle
 * more smoothly.
 *
 * It does provide a settings page, where users can set up a default oracle connection
 */



/**
 * Implementation of hook_menu
 *
 */
function oracleapi_menu() {

  $items = array();

  $items["admin/config/oracleapi"] = array(
    "title" => "Oracle API settings",
    "page_callback" => "fp_render_form",
    "page_arguments" => array("oracleapi_settings_form", "system_settings"),
    "access_arguments" => array("administer_oracleapi"),
    "page_settings" => array(
      "page_has_search" => FALSE,
      "page_banner_is_link" => TRUE,
      "page_hide_report_error" => TRUE,
      "menu_links" => array(
        0 => array(
          "text" => "العودة إلى القائمة الرئيسية",
          "path" => "admin-tools/admin",
        ),
      ),
    ),
    "type" => MENU_TYPE_NORMAL_ITEM,
    "tab_parent" => "admin-tools/admin",
  );


  return $items;

}


function oracleapi_perm() {
  return array(
    "administer_oracleapi" => array(
      "title" => t("Administer Oracle API settings"),
    ),
  );
}


/**
 * Implementation of hook_exit
 *
 * If we have the default connection open, close it.
 *
 */
function oracleapi_exit() {

  if (isset($GLOBALS["oracleapi_global_conn"])) {
    oracleapi_close();
  }

}



/**
 * This is the settings form for the default oracle api connection and settings.
 *
 */
function oracleapi_settings_form() {
  $form = array();

  $form["mark" . $m++] = array(
    "value" => "<p>" . t(" FlightPath فإن إجراء التغييرات على هذه الشاشة لن يكون له أي تأثير على Oracle الافتراضي وإعدادات موقعك. يرجى تذكر أن هذه الوحدة تهدف إلى توفير وظائف للوحدات الأخرى. إذا لم يكن لديك وحدات نمطية مثبتة أخرى تستخدم واجهة برمجة تطبيقات Oracle استخدم هذا النموذج لإعداد اتصال") . "</p>",
  );

  $form["oracleapi_username"] = array(
    "type" => "textfield",
    "label" => t("اسم المستخدم الأساسي:"),
    "value" => variable_get("oracleapi_username", ""),
  );

  $enc_password = variable_get("oracleapi_enc_password", "");
  $password = "";
  if ($enc_password != "") {
    $password = base64_decode($enc_password);
  }

  $form["oracleapi_enc_password"] = array(
    "type" => "password",
    "label" => t("كلمة السر الأساسية:"),
    "value" => $password,
    "description" => t("أيضا MySQL الخاص بك، وتأكد من تقييد قاعدة بيانات Oracle هذا فقط للحفاظ على كلمة المرور من اكتشاف المتطفلين لكلمة المرور في نص عادي. تأكد من أن المستخدم لديه مستوى وصول مقيد بشكل مناسب إلى خادم <b>هذا ليس آمن</b> base64 ملاحظة الأمان: سيتم حفظ كلمة المرور في قاعدة البيانات في نظام ترميز بسيط"),
  );


  $form["oracleapi_server"] = array(
    "type" => "textfield",
    "label" => t("الخادم الاساسي:"),
    "value" => variable_get("oracleapi_server", ""),
    "description" => t(":مثال") . " bb1.example.edu",
  );

  $form["oracleapi_port"] = array(
    "type" => "textfield",
    "label" => t("المنفذ الأساسي:"),
    "value" => variable_get("oracleapi_port", "1521"),
    "description" => t(":مثال") . " 1521",
  );


  $form["oracleapi_sid"] = array(
    "type" => "textfield",
    "label" => t("رمز المستخدم الأساسي:"),
    "value" => variable_get("oracleapi_sid", ""),
    "description" => t(":مثال") . " PROD",
  );


  $form["oracleapi_email_error"] = array(
    "type" => "textfield",
    "label" => t("أرسل رسالة إلكترونية عند حدوث خطأ:"),
    "value" => variable_get("oracleapi_email_error", ""),
    "description" => t(" فسيتم إرسال بريد إلكتروني إلى هذا العنوان. يمكنك إدخال أكثر من عنوان واحد مفصولة بفاصلة. اتركه فارغًا لتعطيله oracle إذا كان هناك خطأ في"),
  );



  return $form;
}


/**
 * Validate handler for the settings form.
 *
 * The primary thing I want to do here is prevent the password from being saved
 * in plain text.  We will replace it with an encoded version.
 *
 * @param unknown_type $form
 * @param unknown_type $form_state
 */
function oracleapi_settings_form_validate($form, &$form_state) {

  $password = $form_state["values"]["oracleapi_enc_password"];
  $enc_password = base64_encode($password);

  $form_state["values"]["oracleapi_enc_password"] = $enc_password;

}



/**
 * Create an oracle connection.  If a username is NOT specified, we will attempt to use
 * the "default" connection information, from the Oracle API's settings page.
 *
 */
function oracleapi_connect($username = "", $password = "", $server = "", $sid = "TEST", $port = "1521") {
  if ($username == "") {
    // Use all the default connection information.
   /*  $username = variable_get("oracleapi_username", "");
    $enc_password = variable_get("oracleapi_enc_password", "");
    $password = base64_decode($enc_password);
    $server = variable_get("oracleapi_server", "");
    $port = variable_get("oracleapi_port", "1521");
    $sid = variable_get("oracleapi_sid", ""); */
	//ORACLE DATABASE CONNECTION INFORMATION
	//JPAZHAI_sme219ps	bantest.sharjah.uos.edu:1526/BANDEV
/*
	$username="JPAZHAI";
	$password="sme219ps";
	$server="bantest.sharjah.uos.edu";
	$port="1526";
	$sid="BANDEV";
*/

/*
//lbandb.sharjah.uos.edu OR 192.168.30.135
*/
	$username="JPAZHAI";
	$password="&&&&&&&&&&&&&&&&&&&&&&&&&";
	$server="lbandb.sharjah.uos.edu";
	$port="1527";
	$sid="PROD";
	}

  if ($username == "") {
    // If it STILL is blank, then it hasn't been set up yet.
    fp_add_message(t("الافتراضية غير متوفرة. يرجى التأكد من إعدادها بشكل صحيح Oracle API إعدادات"), "error");
    return FALSE;
  }


 //$db = "(DESCRIPTION=(ADDRESS_LIST = (ADDRESS = (PROTOCOL = TCP)(HOST = $server)(PORT = $port)))(CONNECT_DATA=(SID=$sid)))";

 $db = " (DESCRIPTION =
    (ADDRESS = (PROTOCOL = TCP)(HOST = lbandb.sharjah.uos.edu)(PORT = 1527))
    (CONNECT_DATA =
      (SERVER = DEDICATED)
      (SERVICE_NAME = PROD)
	  (SID = PROD)
    )";

  $conn = oci_connect($username, $password, $db);

  $GLOBALS["oracleapi_global_conn"] = $conn;

  return $conn;

}





/**
 * Query the oracle database
 *
 * Just like db_query, replacement patterns are allowed.  Ex:
 * oracleapi_query("SELECT * FROM table WHERE name = '?' ", $name);
 *
 * You must escape non-replacement question marks with ??.
 *
 */
function oracleapi_query($sql_query = "") {

  $conn = $GLOBALS["oracleapi_global_conn"];


  // We need to go through our query and handle replacement patterns.

  ////////////////////////////////////
  // (From _DatabaseHandler.php's db_query function)

  // If there were any arguments to this function, then we must first apply
  // replacement patterns.
  $args = func_get_args();
  array_shift($args);
  if (is_array($args[0])) {
    // If the first argument was an array, it means we passed an array of values instead
    // of passing them directly.  So use them directly as our args.
    $args = $args[0];
  }

  // The query may contain an escaped ?, meaning "??", so I will replace that with something
  // else first, then change it back afterwards.
  $sql_query = str_replace("??", "~ESCAPED_Q_MARK~", $sql_query);

  // If $c (number of replacements performed) does not match the number of replacements
  // specified, warn the user.
  if (substr_count($sql_query, "?") != count($args)) {
    fpm("<br><b>WARNING:</b> Replacement count does not match what was supplied to oracle query: $sql_query<br><br>");
  }

  if (count($args) > 0) {
    // Replace each occurance of "?" with what's in our array.

    foreach ($args as $replacement) {
      // Escape the replacement...
      // The replacement might ALSO have a question mark in it.  Escape that too.
      if (strpos($replacement, "?") !== 0) {
        $replacement = str_replace("?", "~ESCAPED_Q_MARK~", $replacement);
      }

      // Because mysql_real_escape_string will allow \' to pass through, I am going to
      // first use mysql_real_escape_string on all slashes.
      //$replacement = str_replace("\\" , mysql_real_escape_string("\\"), $replacement);

      // Okay, perform the replacement
      $replacement = oracleapi_escape_string($replacement);

      $sql_query = preg_replace("/\?/", $replacement, $sql_query, 1);
    }

  }

  $sql_query = str_replace("~ESCAPED_Q_MARK~", "?", $sql_query);

  //////////////////////////////////////////////




  @$result = oci_parse($conn, $sql_query);
  @oci_execute($result);

  $GLOBALS["oracleapi_global_last_result"] = $result;

  // Check for errors.   If they exist, return FALSE!
  if ($err = oracleapi_error($result)) {
    $msg = "";

    $msg .= t("An Oracle error has occured:") . " " . $err;
    $arr = debug_backtrace();

    fpm($msg . "<br><br>" . t(":تقفّي"));
    fpm($arr);

    // Should we email anyone?
    $email_address = variable_get("oracleapi_email_error", "");
    if ($email_address != "") {
      $backtrace = print_r($arr, true);
      mail($email_address, "FlightPath OracleAPI error", $msg . "\n\nBacktrace:\n\n" . $backtrace);
    }

    // Should we kill the script?
    if ($GLOBALS["fp_oracleapi_die_oracle_errors"] == TRUE) {
      print "\n<br>$msg<br>\n
             Please fix the error and try again.<br>\n";
      print "<br><br>Program backtrace:
              <pre>" . print_r($arr, true) . "</pre>";
      die;
    }


    return FALSE;
  }



  return $result;
}

function oracleapi_fetch_array($result) {
  $row = oci_fetch_array($result, OCI_BOTH+OCI_RETURN_NULLS);
  return $row;
}

function oracleapi_affected_rows ($result) {
  return oci_num_rows($result);
}


function oracleapi_fetch_object ($result) {
  return oci_fetch_object($result);
}


/**
 * Closes the oracle connection. If conn is null, it will use the global connection (recommended)
 *
 * @param resourse $conn
 */
function oracleapi_close ($conn = NULL) {
  if ($conn == NULL) {
    $conn = $GLOBALS["oracleapi_global_conn"];
  }

  if ($conn != NULL) {
    oci_close($conn);
  }

  $GLOBALS["oracleapi_global_conn"] = NULL;
  unset($GLOBALS["oracleapi_global_conn"]);

}

/**
 * Returns error string or FALSE. If result is NULL, it uses last result.
 *
 * @param unknown_type $result
 */
function oracleapi_error($result = NULL) {
   if ($result == NULL) {
      $result = $GLOBALS["oracleapi_global_last_result"];
   }
   $arr = oci_error($result);

   if (is_array($arr)) {
      return $arr["message"];
   }

   return FALSE;  // no error!
}



/**
 * Replacement for mysql_errno().  FALSE if no error. If result is null it uses last result.
 *
 * @param unknown_type $result
 */
function oracleapi_errno($result = NULL) {
   if ($result == NULL) {
      $result = $GLOBALS["oracleapi_global_last_result"];
   }
   $arr = oci_error($result);

   if (is_array($arr)) {
      return $arr["code"];
   }

   return FALSE;  // no error!

}

/**
 * Oracle has an unusual way of escaping quotes, which addslashes() will NOT work on.
 * We will do that here.
 *
 * @param unknown_type $str
 */
function oracleapi_escape_string($str) {

  // Escape single quotes ' with two of them ''

  $str = str_replace("'", "''", $str);

  return $str;
}
