<?php

/**
 * @file
 * This is the Oracle API module's primary module file.
 *
 * This module is designed for use by programmers for interacting with Oracle
 * more smoothly.
 *
 * It does provide a settings page, where users can set up a default oracle connection
 */



/**
 * Implementation of hook_menu
 *
 */
function oracleapi_menu() {

  $items = array();

  $items["admin/config/oracleapi"] = array(
    "title" => "Oracle API settings",
    "page_callback" => "fp_render_form",
    "page_arguments" => array("oracleapi_settings_form", "system_settings"),
    "access_arguments" => array("administer_oracleapi"),
    "page_settings" => array(
      "page_has_search" => FALSE,
      "page_banner_is_link" => TRUE,
      "page_hide_report_error" => TRUE,
      "menu_links" => array(
        0 => array(
          "text" => "العودة إلى القائمة الرئيسية",
          "path" => "admin-tools/admin",
        ),
      ),
    ),
    "type" => MENU_TYPE_NORMAL_ITEM,
    "tab_parent" => "admin-tools/admin",
  );


  return $items;

}


function oracleapi_perm() {
  return array(
    "administer_oracleapi" => array(
      "title" => t("Administer Oracle API settings"),
    ),
  );
}


/**
 * Implementation of hook_exit
 *
 * If we have the default connection open, close it.
 *
 */
function oracleapi_exit() {

  if (isset($GLOBALS["oracleapi_global_conn"])) {
    oracleapi_close();
  }

}



/**
 * This is the settings form for the default oracle api connection and settings.
 *
 */
function oracleapi_settings_form() {
  $form = array();

  $form["mark" . $m++] = array(
    "value" => "<p>" . t("Use this form to set up the default Oracle connection
                  and settings for your site.  Please remember, this module is meant to
                  provide functionality for other modules.  If you have no other modules
                  installed which make use of Oracle API, then making changes on this screen
                  will have no effect on FlightPath.") . "</p>",
  );

  $form["oracleapi_username"] = array(
    "type" => "textfield",
    "label" => t("Default username:"),
    "value" => variable_get("oracleapi_username", ""),
  );

  $enc_password = variable_get("oracleapi_enc_password", "");
  $password = "";
  if ($enc_password != "") {
    $password = base64_decode($enc_password);
  }

  $form["oracleapi_enc_password"] = array(
    "type" => "password",
    "label" => t("Default password:"),
    "value" => $password,
    "description" => t("Security note: the password will be saved to the database
                        in a simple base64 encoding scheme.  <b>THIS IS NOT SECURE</b>.  This
                        is merely to keep prying eyes from spotting the password
                        in plain text.  Be sure that this user/password has an
                        appropriately restricted level of access to your Oracle server,
                        and make sure your MySQL database is tightly restricted as well."),
  );


  $form["oracleapi_server"] = array(
    "type" => "textfield",
    "label" => t("Default host server:"),
    "value" => variable_get("oracleapi_server", ""),
    "description" => t(":مثال") . " bb1.example.edu",
  );

  $form["oracleapi_port"] = array(
    "type" => "textfield",
    "label" => t("Default port:"),
    "value" => variable_get("oracleapi_port", "1521"),
    "description" => "1521" . t(":مثال"),
  );


  $form["oracleapi_sid"] = array(
    "type" => "textfield",
    "label" => t("Default SID:"),
    "value" => variable_get("oracleapi_sid", ""),
    "description" => t(":مثال") . " PROD",
  );


  $form["oracleapi_email_error"] = array(
    "type" => "textfield",
    "label" => t("Email on errors:"),
    "value" => variable_get("oracleapi_email_error", ""),
    "description" => t("If there is an oracle error, an email will be sent to this
                        address.  You may enter more than one address separated by a comma.
                        Leave blank to disable."),
  );



  return $form;
}


/**
 * Validate handler for the settings form.
 *
 * The primary thing I want to do here is prevent the password from being saved
 * in plain text.  We will replace it with an encoded version.
 *
 * @param unknown_type $form
 * @param unknown_type $form_state
 */
function oracleapi_settings_form_validate($form, &$form_state) {

  $password = $form_state["values"]["oracleapi_enc_password"];
  $enc_password = base64_encode($password);

  $form_state["values"]["oracleapi_enc_password"] = $enc_password;

}



/**
 * Create an oracle connection.  If a username is NOT specified, we will attempt to use
 * the "default" connection information, from the Oracle API's settings page.
 *
 */
function oracleapi_connect($username = "", $password = "", $server = "", $sid = "TEST", $port = "1521") {
  if ($username == "") {
    // Use all the default connection information.
    $username = variable_get("oracleapi_username", "");
    $enc_password = variable_get("oracleapi_enc_password", "");
    $password = base64_decode($enc_password);
    $server = variable_get("oracleapi_server", "");
    $port = variable_get("oracleapi_port", "1521");
    $sid = variable_get("oracleapi_sid", "");
  }

  if ($username == "") {
    // If it STILL is blank, then it hasn't been set up yet.
    fp_add_message(t("Oracle API default settings are not availabe.  Please make sure
                      they are set up correctly."), "error");
    return FALSE;
  }


  $db = "(DESCRIPTION=(ADDRESS_LIST = (ADDRESS = (PROTOCOL = TCP)(HOST = $server)(PORT = $port)))(CONNECT_DATA=(SID=$sid)))";
  $conn = oci_connect($username, $password, $db);

  $GLOBALS["oracleapi_global_conn"] = $conn;

  return $conn;

}





/**
 * Query the oracle database
 *
 * Just like db_query, replacement patterns are allowed.  Ex:
 * oracleapi_query("SELECT * FROM table WHERE name = '?' ", $name);
 *
 * You must escape non-replacement question marks with ??.
 *
 */
function oracleapi_query($sql_query = "") {

  $conn = $GLOBALS["oracleapi_global_conn"];


  // We need to go through our query and handle replacement patterns.

  ////////////////////////////////////
  // (From _DatabaseHandler.php's db_query function)

  // If there were any arguments to this function, then we must first apply
  // replacement patterns.
  $args = func_get_args();
  array_shift($args);
  if (is_array($args[0])) {
    // If the first argument was an array, it means we passed an array of values instead
    // of passing them directly.  So use them directly as our args.
    $args = $args[0];
  }

  // The query may contain an escaped ?, meaning "??", so I will replace that with something
  // else first, then change it back afterwards.
  $sql_query = str_replace("??", "~ESCAPED_Q_MARK~", $sql_query);

  // If $c (number of replacements performed) does not match the number of replacements
  // specified, warn the user.
  if (substr_count($sql_query, "?") != count($args)) {
    fpm("<br><b>WARNING:</b> Replacement count does not match what was supplied to oracle query: $sql_query<br><br>");
  }

  if (count($args) > 0) {
    // Replace each occurance of "?" with what's in our array.

    foreach ($args as $replacement) {
      // Escape the replacement...
      // The replacement might ALSO have a question mark in it.  Escape that too.
      if (strpos($replacement, "?") !== 0) {
        $replacement = str_replace("?", "~ESCAPED_Q_MARK~", $replacement);
      }

      // Because mysql_real_escape_string will allow \' to pass through, I am going to
      // first use mysql_real_escape_string on all slashes.
      //$replacement = str_replace("\\" , mysql_real_escape_string("\\"), $replacement);

      // Okay, perform the replacement
      $replacement = oracleapi_escape_string($replacement);

      $sql_query = preg_replace("/\?/", $replacement, $sql_query, 1);
    }

  }

  $sql_query = str_replace("~ESCAPED_Q_MARK~", "?", $sql_query);

  //////////////////////////////////////////////




  @$result = oci_parse($conn, $sql_query);
  @oci_execute($result);

  $GLOBALS["oracleapi_global_last_result"] = $result;

  // Check for errors.   If they exist, return FALSE!
  if ($err = oracleapi_error($result)) {
    $msg = "";

    $msg .= t("An Oracle error has occured:") . " " . $err;
    $arr = debug_backtrace();

    fpm($msg . "<br><br>" . t("The backtrace:"));
    fpm($arr);

    // Should we email anyone?
    $email_address = variable_get("oracleapi_email_error", "");
    if ($email_address != "") {
      $backtrace = print_r($arr, true);
      mail($email_address, "FlightPath OracleAPI error", $msg . "\n\nBacktrace:\n\n" . $backtrace);
    }

    // Should we kill the script?
    if ($GLOBALS["fp_oracleapi_die_oracle_errors"] == TRUE) {
      print "\n<br>$msg<br>\n
             Please fix the error and try again.<br>\n";
      print "<br><br>Program backtrace:
              <pre>" . print_r($arr, true) . "</pre>";
      die;
    }


    return FALSE;
  }



  return $result;
}

function oracleapi_fetch_array($result) {
  $row = oci_fetch_array($result, OCI_BOTH+OCI_RETURN_NULLS);
  return $row;
}

function oracleapi_affected_rows ($result) {
  return oci_num_rows($result);
}


function oracleapi_fetch_object ($result) {
  return oci_fetch_object($result);
}


/**
 * Closes the oracle connection. If conn is null, it will use the global connection (recommended)
 *
 * @param resourse $conn
 */
function oracleapi_close ($conn = NULL) {
  if ($conn == NULL) {
    $conn = $GLOBALS["oracleapi_global_conn"];
  }

  if ($conn != NULL) {
    oci_close($conn);
  }

  $GLOBALS["oracleapi_global_conn"] = NULL;
  unset($GLOBALS["oracleapi_global_conn"]);

}

/**
 * Returns error string or FALSE. If result is NULL, it uses last result.
 *
 * @param unknown_type $result
 */
function oracleapi_error($result = NULL) {
   if ($result == NULL) {
      $result = $GLOBALS["oracleapi_global_last_result"];
   }
   $arr = oci_error($result);

   if (is_array($arr)) {
      return $arr["message"];
   }

   return FALSE;  // no error!
}



/**
 * Replacement for mysql_errno().  FALSE if no error. If result is null it uses last result.
 *
 * @param unknown_type $result
 */
function oracleapi_errno($result = NULL) {
   if ($result == NULL) {
      $result = $GLOBALS["oracleapi_global_last_result"];
   }
   $arr = oci_error($result);

   if (is_array($arr)) {
      return $arr["code"];
   }

   return FALSE;  // no error!

}

/**
 * Oracle has an unusual way of escaping quotes, which addslashes() will NOT work on.
 * We will do that here.
 *
 * @param unknown_type $str
 */
function oracleapi_escape_string($str) {

  // Escape single quotes ' with two of them ''

  $str = str_replace("'", "''", $str);

  return $str;
}
